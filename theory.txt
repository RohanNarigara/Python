|| Python Programming ||

1991 - Guido Van Rossum


-------------------------------------------------------------------------------------------------------------------------
|| Chapter - 1: Introduction ||

--> REPL: Read Execute Print Loop

==> to run the code:
--> python file.py 


==> to print the line:
--> single line: print("<text>", end="")   # end="" is for not adding new line
--> multi line: print(''' <text> ''')  OR  print(""" <code> """)


==> to install Modules:
--> pip install <module_name>


==> to comment code:
--> single line: #
--> multi line: """ <code> """  OR  ''' <code> '''



---------------------------------------------------------------------------------------------------------------------
|| Chapter - 2: Variables and Datatypes ||

==> Variables:

--> a = 1
--> b = "Rohan"
--> c = 22.8

--> Rules:
1. A variable name can contain digits, numbers, and underscores.
2. A variable name can only start with alphabet and underscores.
3. A variable name cannot start with digit.
4. No white space is allowed to be used in variable name.


==> Data Types:
1. Integers
2. Floating point numbers
3. Strings
4. Booleans
5. None


==> Oparators in Python:
1. Arithmatic Operator: +, -, *, /
2. Assignment Operator: =, +=, -=
3. Comparison Operator: ==, >, <, >=, <=, !=   # return value is always Boolean
4. Logical Opeator: and, or, not 

--> Values in operation is called as operands.
Ex. 3 + 7 = 10
# in this, '3' and '7' are operands, '+' is operator and '10' is result.

--> Logical Operator: not
# it also works with Boolean operator and revers the value of operand.
Ex. print(not(True)) 
Opt. False


==> to know the Datatype:
--> we use type(<var>) funcation to know datatype of variable.
Ex. a = 10
    t = type(a)
    print(t)
Op. <class 'int'>


==> Type Casting:
--> If we want to change the datatype of variable, there are many functions for every datatype (If possible).
Ex. str(31) = for converting int to str
    int("32") = for converting str to int
    float(32) = for converting int to float


==> Taking user input:
--> for that use input(<text>) function.
Ex. a = input("Enter Number: ")
--> It will take input in 'str' form.


==> Taking input with specific datatype:
--> for that enclose the input() function within datatype.
Ex. for taking input as 'int':
    a = int(input("Enter Number: "))


==> To display the user input with heading:
--> for that use print() function and after text put comma (,) and write variable.
Ex. print("The number is:", a)



-------------------------------------------------------------------------------------------------
|| Chapter - 3: Strings ||

--> Strings are Immutable. We cannot change the main String.
--> it can be defined in single (' '), double (" "), and triple (''' ''') quotes.
--> Triple Quotes are used for multiline string.
--> Position number of String starts with 0 from first and -1 from last.


==> To know length of string:
--> for that we use len() function.
Ex. a = "Rohan"
    print(len(a))


==> String Slicing:
--> for that use variable_name[start_index:end_index]
--> end_index will not be considered for output
--> If we don't write start_index, it will take 0 by default.
--> If we don't write end_index, it will take last index by default.
Ex. name = "Rohan"
    short = name[0:3] OR short = name[:3]
    print(short)
Opt. Roh


==> To show specific character:
--> for that use variable_name[char_pos]
Ex. name = "Rohan"
    char1 = name[1]
    print(char1)
Opt. o


==> Negative Slicing:
--> for that use variable_name[-start_index:-end_index]
--> end_index will not be considered for output
Ex. name = "Rohan"
    negative = name[-4:-1]
    print(negative)
Opt. oha


==> Slicing with skip value:
--> for that use variable_name[start_index:end_index:skipping_value]
Ex. num = '0123456789'
    print(num[1:8:2])
Opt. 1357


==> To check whether string starts with specific chars:
--> for that use variable_name.startswith("<chars>").
--> It is case sensitive.
Ex. name = "Rohan"
    print(name.startswith("Roh"))
Opt. True


==> To check whether string ends with specific chars:
--> for that use variable_name.endswith("<chars>").
--> It is case sensitive.
Ex. name = "Rohan"
    print(name.endswith("han"))
Opt. True


==> To capitalize the Word:
--> for that use variable_name.capitalize().
Ex. name = "rohan"
    cap_str = name.capitalize()
Opt. Rohan


==> Escape sequence character:
--> It starts with Black Slash (\) .
Ex. \n = for new line
    \t = for tab
    \" = for printing double quotes ("").

Ex. a = "My Name is "Rohan""
Opt. Invalid Syntax

Ex. a = "My Name is \"Rohan\""
Opt. My Name is "Rohan"


==> 'f string':
--> It is used to display variable value within the string.
--> for that use print(f"<text> {variable_name}")
Ex. name = "Rohan"
    print(f"Good Morning, {name}")
Opt. Good Morning, Rohan


==> To find sub-string in main string:
--> for that use variable_name.find("<text>")
--> It returns the index of first occurance of the string (if it is available).
--> It returns '-1' if there is no match of sub-string.

Ex. a = "It is python."
    print(a.find("pyt"))
Opt. 6

Ex. a = "It is python."
    print(a.find("java"))
Opt. -1



-----------------------------------------------------------------------------------
|| Chapter - 4: List and Tuples || 

==> List:
--> Python Lists are containors to store set of values of any datatype.
--> Lists are Mutable.
--> Use Square Brackets [] to denote List.
--> List of list ia allowed in Python.
Ex. marks = [["Rohan", 100], ["Rahul", 98]]


==> To make List:
--> use variable_name = ["elm 1", elm 2, elm 0.3]
Ex. listEx = ["Rohan", 22, 8.04, True]


==> To change the element in List:
--> for that assign the new value to element position using list_name[<pos>] = new_value
Ex. listEx[0] = "Narigara"


==> Some methods of List:
--> list_name.append("<new_elm>") = to add new element at the end of List
--> list_name.sort() = to sort the elements in increasing order
--> list_name.revers() = to sort the elements in decreasing order
--> list_name.insert(index_number, new_elm) = to insert new element on perticular index
--> list_name.pop(index_number) = to remove the element from perticular index
--> list_name.remove(<elm>) = to remove the perticuler element


---------------------------
==> Tuple:
--> Tuples are container to store a set of values of any datatype.
--> Tuples are also Immutable.
--> Use Paranthesis () to make Tuple.


==> To make Tuple:
--> use tuple_name = (elm 1, elm 2, elm 3)
Ex. numbers = (1, 5, 76)
    names = ("Abhay", "Babita", "Chetan")


==> To make tuple with only one element:
--> use tuple_name = (elm 1, )
Ex. num = (1, )


==> Some methods of Tuple:
--> tuple_name.count(<elm>) = to count the occurance of element
--> tuple_name.index(<elm>) = to find the first occurance of element (if not available, it raises ValueError)




--------------------------------------------------------------------------------------------------------------
|| Chapter - 5: Dictionary and Sets ||

==> Dictionary:
--> It is used to store key-value kind of Data.
--> It is unorderd.
--> It is Mutable.
--> It is indexed.
--> It cannot contain duplicate data.


==> To make Dictionary:
--> use dict_name = { "key" : "value", "key" : "value"}
Ex. marks = {"Rohan" : 99, "Rakesh" : 85}


==> To make empty Dictionary:
--> use dict_name = {}
Ex. d = {}


==> To display data from Dictionary:
--> use print(dict_name[<key>])
--> It returns value of respective key as output.
--> If key does not exist in Dictionary, it prints none.
Ex. marks = {"Rohan" : 99, "Rakesh" : 85}
    print(marks["Rohan"])
Opt. 99


==> Some methods in Dictionary:
--> dict_name.items() = returns all the elements in key-value pair (in tuple)
--> dict_name.keys() = returns all the keys of Dictionary
--> dict_name.update({<key>:<value>}) = updates the value of respective key. and if key is not available, it appends data in Dictionary
--> dict_name.get(<key>) = return the value of respective key. If key does not exist in Dictionary, it prints none.



------------------------------------------------
==> Sets:
--> Set is a collection of non-repetitive elements.
--> Use Curly Braces {} to make set.
--> It does not maintains the order.
--> We cannot access elements by index.
--> We can store multi-datatype elements in set.


==> To make set:
--> use set_name = {elm1, elm2}
Ex. a = {1, 2}


==> To make empty set:
--> use set() method to make empty set.
Ex. e = set()


==> Some methods of Set:
--> set_name.add(<elm>) = to add element in set
--> len(set_name) = to know lenght of set
--> set_name.remove(<elm>) = to remove the specific element
--> set_name.pop() = to remove random element from Set
--> set_name.union(set2_name) = to union two Sets
--> set_name.intersection(set2_name) = to get common elements from two Sets



------------------------------------------------------------------------------------------------------------
|| Chapter - 6: Conditional Expression ||

==> if/else:
--> Used for single condition.
--> Indentation is must.

--> Syntax:
--> if(condition):
        <code>  --> Executes, if the condition is True.
    else:
        <code>  --> Executes, if the condition is False.


==> if/elif/else ladder:
--> Used for different-different multiple conditions

--> Syntax:
--> if(condition):
        <code>  --> Executes, if the 1st condition is True.
    elif(condition2):
        <code>  --> Executes, if the 1st condition is not True and 2nd condition is True.
    else:
        <code>  --> Executes, if both conditions are False.




------------------------------------------------------------------------------------------------------------------
|| Chapter - 7: Loops in Python ||

==> Types of Loop:
1. While Loop
2. For Loop


==> While Loop:
--> Syntax: while(condition):
                <code>

Ex: while(i<6):
        print(i)
        i += 1

Opt: 1
     2
     3
     4
     5
    

==> for loop:
--> Syntax: for i in range(<variable_name> / start_index, end_index+1, step_size)
                <code>

Ex: for i in range(0, 7)
        print(i)

Opt: 0
     1
     2
     3
     4
     5
     6


==> for loop with else:
--> Syntax: for i in range(<variable_name> / start_index, end_index+1, step_size)
                <code>
            else:
                <code>


==> break in loop:
--> It is use to exit the loop in between.

--> Syntax: for i in range(<variable_name> / start_index, end_index+1, step_size)
                if(condition):
                    break
                <code>


==> continue in loop:
--> It is use to continue the loop and skip specific iteration.

--> Syntax: for i in range(<variable_name> / start_index, end_index+1, step_size)
                if(condition):
                    continue
                <code>


==> pass in loop:
--> used to ignore the loop.
--> When we don't want to execute the loop.

--> Syntax: for i in range(<variable_name> / start_index, end_index+1, step_size)
                if(condition):
                    pass



----------------------------------------------------------------------------------------------------------
|| Chapter - 8: Functions and Recursions ||

==> Functions:
--> Function is a piece of code written to carry out specific task.


==> To define function:
--> Syntax: def function_name(arguments):
                <code>
                return <smt>
                
            function_name()  #This is to run / call the function

--> Without Arguments
Ex. def avg():
        a = int(input("Enter 1st num: ))
        b = int(input("Enter 2st num: ))
        average = (a + b) / 2
        print(f"average is {average}")

    avg()


--> With Arguments:
def greet(name, ending = "Thanks"):
    print(f"Have a Good Day {name}")
    print(ending)
    return "done"

greet("Rohan", "Thank You")

Opt. Have a Good Day Rohan
     Thank You
     done



==> Recursions:
--> Recursion is the function that calls itself.
--> Base condition is necessary in Recursion.


Ex. n = 5
    def factorial(n):
        if(n == 1 or n == 0):
            return 1
        return n * factorial(n-1)

    print(f"Factorial of {n} is: {factorial(n)}")

Opt. Factorial of 5 is 125



------------------------------------------------------------------------------------------------
|| Chapter - 9: File I/O ||

--> Open File:
--> to open file use built-in python function open(<file_name>).

Ex. f = open("file.txt", "r")
--> "r" is to open file in read mode. However, file automatically opens in read mode.


--> Close File:
--> to close the file use built-in function file_variable.close().

Ex. f = open("file.txt")
    f.close()


--> Read File:
--> to read the file use file_variable.read().
Ex. f = open("file.txt")
    data = f.read()


--> Write File:
--> to write in file use file_variable.write(data)

Ex. f = open("file.txt", "w")
    str = "Hello, How are you?"
    f.write(str)
--> "w" is for opening file in write mode


--> Read multiple lines:
--> to read multiple lines use file_variable.readlines()

Ex. f = open("file.txt")
    lines = f.readlines()
--> it will print all the lines of file and return it as a list.


--> Read single line by line:
--> to read lines of file line by line use file_variable.readline()

Ex. f = open("file.txt")
    line1 = f.readline()
    print(line1)
    line2 = f.readline()
    print(line2)
--> it will print all lines, line by line and return it as a String.


--> Append File:
--> to append anything in file use file_variable.append(data)

Ex. f = open("file.txt", "a")
    str = "Hello, How are you?"
    f.append(str)
--> "a" is for opening file in append mode.


--> With Statement:
--> using it we don't have to write file_name.close() every time.

--> Syntax: with open(file_name) as f:
                f.read()

Ex. with open("file.txt", "r") as f:
        print(f.read())



--------------------------------------------------------------------------------------------------
|| Chapter - 10: Object Oriented Programming (OOP) ||

--> Class: 
--> Class is a blueprint for creating form.

--> Syntax:
    class Class_Name:
            <code>

Ex. class Employee:
        language = "Python"
        salary = 1200000

    harry = Employee()
    harry.name = "Harry"

--> Here name is an instance-attribute and language and salary are the class-attributes.


--> Function inside of Class:
--> When we declare function inside the class, we have to use "def function_name(self):". (we can write anything instead of self.)
--> It is because when the class' function is called by any instance that becomes ClassName.function_name(instance_name).

--> Syntax:
    class ClassName:
        def function_name(self):
            <code>

Ex. class Employee:
        language = "Python"
        salary = 1200000

        def getInfo(self):
            print(f"The Language is {self.language}. The Salary is {self.salary}")

    harry = Employee()
    harry.getInfo()  // It basically converts into Employee.getInfo(harry)


--> Static method:
--> If there is any method that doesn't use any object and we don't want to pass any object (self) as a argument/s, at that time we can use Static methods.

--> Syntax:
    class ClassName:
        @staticmethod
        def function_name():
            <code>
Ex.
    class Employee:
        language = "Python"
        salary = 1200000

        def getInfo(self):
            print(f"The Language is {self.language}. The Salary is {self.salary}")

        @staticmethod
        def greet():
            print("Hello, Good Morning")

    harry = Employee()
    harry.greet()
    harry.getInfo()


--> Constructor:
--> __init__():
--> __init__() is the Constructor that runs as soon as the object is created.
--> It takes self argument and also can take multiple other arguments.
--> The methods that start and end with __ (Double Underscores) is also called as dunder methods

--> Syntax:
    def __init__(self):
        <code>

Ex. class Employee:
        language = "Python"
        salary = 1200000

        def __init__(self, language, salary):
            self.language = language
            self.salary = salary
            print("I am running")

    harry = Employee("JavaScript", 1300000)


--> Use n**num for raising it on n.


------------------------------------------------------------------------------------------
|| Chapter - 11: Inheritance and more about OOPs ||

--> Inheritance:
--> Inheritance is the way of creating a new class from an existing class.
--> Inheritance is used to access the functions of parent class in one or more child classes.
--> We can use all the methods and attributes of parent class in child class.

--> Types of Inheritance:
    1. Single Inheritance
    2. Multiple Inheritance
    3. Multi-Level Inheritance

--> Syntax:
    class Parent:
        def func1(self):
            <code>

    class Child1(Parent):
        def func2(self):
            <code>

    p = Parent()
    c = Child1()
    

Ex. class Parent:
        company = "ITC"
        def show(self):
            print("I am parent")

    class Child1(Parent):
        company = "ITC Infotech"
        def showName(self):
            print("I am Child of Parent")

    p = Parent()
    c = Child1()

    print(p.company, c.company)


--> super() method:
--> super() method is used to access the methods of a super class in derived class.

Ex. class Parent:
        company = "ITC"
        def show(self):
            print("I am parent")

    class Child1(Parent):
        company = "ITC Infotech"
        super().show()
        def showName(self):
            print("I am Child of Parent")


--> Class-Method:
--> A class method is a method which is bound to the class not the object of the class.
--> After using it, we can not change the value of variables assigned within specific class-method outside the class.
--> For using it, we have to use @classmethod decorator.


--> Syntax:
    class ClassName:
        variable_ame = "<value>"

        @classmethod
        def methodName(cls):
            print(cls.variable_name)

Ex. class Parent:
        company = "ITC"

        @classmethod
        def show(cls):
            print(cls.company)

    p = Parent()
    p.company = "ICC"
    p.show()

    --> Output:
        ITC     // not ICC


--> Property Decorators:
--> Syntax:
    class ClassName:
        variable_ame = "<value>"

        @property
        def methodName(self):
            return smt

        @property_method.setter
        def methodName(self):
            self.smt = 1

Ex. class Parent:
        company = "ITC"

        @property
        def name(self):
            return f"{self.fname} {self.lname}"

        @name.setter
        def name(self, value):
            self.fname = value.split(" ")[0]
            self.lname = value.split(" ")[1]


    p = Parent()
    p.name = "Rohan Narigara"
    print(p.fname, p.lname)



----------------------------------------------------------------------------------
|| Chapter - 12: Advanced Python 1 ||


--> Walrus Operator:
--> It allows to assign the value to variable as a part of the Expression.

Ex. if(n := len([1, 2, 3, 4, 5])) > 3:
        <code>


--> Assigning type:
--> By assigning type to any variable or method, it will be easy to access all the methods of respected data typed variable.
--> it is easy for other to understand the code and how to use it.

Ex. n: int = 2
    name: str = "Rohan"

    def sum(a: int, b: int) -> int:
        return a + b

    --> '-> int' define the type of return value.

--> Advances Type Hints:
--> It can be access using "from typing import Tuple, Union, List".
--> It is also used to assign the data type to variable.

--> Match Case:
--> It is alternative for Switch-Case in python as python does not have any concept like switch-case.

--> Syntax:
    match variable_name:
        case <case1>:
            <code>
        case <case2>:
            <code>
        case _: // It is for default case.
            <code>

Ex. def http_status(status):
        match status:
            case 200:
                return "OK"
            case 404:
                return "Not Found"
            case 500:
                return "Internal Server Error"
            case _:
                return "Unknown Status"

    print(http_status(200))

    // Output: OK


--> Exception Handling:
--> For handling the Exceptions, we use try-except.

--> Syntax:
    try:
        <code>
    except Exception as e:
        print(e)

--> Here, except block invoke only if there is any error or crashing in the code of try block.


--> Raising an Error:
--> For raising an error we have to use 'raise <errorName>'.

--> Syntax:
    if (<condition>):
        raise <errorName>("<Error Message>")
    else:
        <code>

Ex. a = int(input("Enter Number 1: ))
    b = int(input("Enter Number 2: ))

    if (b == 0):
        raise ZeroDivisionError("You can not divide the number with 0")
    else:
        print(f"Division is {a/b}")


--> Finally Block:
--> Finally Block runs whether code successfully runs or raises any error or even any other block returns anything.
--> The main usage of Finally Block is while using it in function

--> Syntax:
    try:
        <code>
    except <Exception>:
        <code>
    finally:
        <code>



--> if __name__ == "__main__":
--> When we want that the particular code runs only when the original file is running, at that time we can use __name__ == "__main__".

--> Syntax:
    if __name__ == "__main__":
        <code>

--> The code inside the 'if __name__ == "__main__"' will not work if the respected file is imported in the another file.



--> global Keyword:
--> We can use global keyword with any variable or function which are not the part of any class or other function to use and modify in existing class or function.

Ex. a = 10

    def fun():
        a = 3
        print(a)
    
    fun()
    print(a)

    // Output: 3
               10

        BUT

Ex. a = 10

    def fun():
        global a
        a = 3
        print(a)
    
    fun()
    print(a)

    // Output: 3
               3


--> Enumerate Function:
--> enumerate function add counter to an iterable item and returns it.

--> Syntax:
    for i, item in enumerate(<smt>):
        <code>

Ex. l = [1,2,3,4,5]
    for index, item in enumerate(l):
        print(f"The item at index {index} is {item}")

    --> Output: The item at index 0 is 1
                The item at index 1 is 2
                The item at index 2 is 3
                The item at index 3 is 4

==> List Comprehension:
--> It is used while we are working with bthe list and want to perform tasks on lists.

Ex. myList = [1, 2, 3, 4, 5]
    
    squaredList = []
    for item in myList:
        squaredList.append(item*item)
    
    print(squaredList)

    // Output: [1, 4, 9, 16, 25]

--> It can be easily done using List Comprehensions with minimum lines of code.


Ex. myList = [1, 2, 3, 4, 5]

    squaredList = [i*i for i in myList]

    // Output: [1, 4, 9, 16, 25]

    print(squaredList)



----------------------------------------------------------------------------------
|| Chapter - 13: Advanced Python 2 ||

==> virtualenv:
--> It is an virtual environment of python that doesn't have any relation (isolated) with other python environments installed on the System.
--> It has all the functionalities of python.

--> to install virtual envitonment, we can simply use "pip install virtualenv" command on terminal.

--> to create the virtual environment, we have to simply use "virtualenv <env_name>" command.

--> to activate the virtualenv:
--> for that we have to simply run the command in terminal with the folder open where the virtualenv is installed:
    ".\<env_name>>\Scripts\activate.ps1"

--> to deactivate the vistual environment:
--> for that we have to simply write command in the terminal that is "deactivate" or simply close the terminal.

--> to list all the installed packages info:
--> for that we simply have to type one command that is "pip freeze".

--> requirements.txt:
--> it is a file in which we can store all the installed library of environment, so that whenever we want to create new evnironment, we can directly install all these simply.
--> to create "requirements.txt", we have to simply write command that is "pip freeze > requirements.txt"

--> to install it in other environment, we have to simply write command that is "pip install -r .\requirements.txt".


==> Lambda Function:
--> to make it use lambda keyword followed by function name and = (equal to sign)
--> In this, we have to provide total arguments while runnig the lambda function.

--> Syntax:
    variable_name = lambda arguments:expressions

Ex. square = lambda x: x * x
    print(square(2))

    // Output: 4


==> join() function:
--> It works with strings.

--> Syntax:
    variable_name = "<char>".join(<variable_name>)

Ex. name = ["Harry", "Rohan", "Shubham"]
    final = ":".join(name)

    // Output: Harry:Rohan:Shubham


==> formate function:
--> It was used instead of f string.

--> Syntax:
    "{} <smt> {} <smt>".formate("<replacement>", "<replacement>")

    --> we can also give numbering to arguments and it will print according to it.
    "{0} <smt> {1} <smt>".formate("<replacement>", "<replacement>")

Ex: a = "{} is a good {}".formate("Rohan", "boy")
    print(a)
    // Output: Rohan is a good boy

    a = "{1} is a good {0}".formate("Rohan", "boy")
    print(a)
    // Output: boy is a good Rohan


==> Map, Filter & Reduce:
--> All these functions are iterable.

==> Map Function:
--> It is a function which goes through all the elements in list and performs tasks according to function provided on it.

--> Syntax:
    variable_name = map(function, input_list)

Ex: l = [1, 2, 3, 4, 5]

    square = lambda x: x*x

    sqList = map(square. l)
    print(list(sqList))

    // Output: [1, 4, 9, 16, 25]


==> Filter Function:
--> It does filtering of the given list according to function provided as argument.
--> It creates a list of items for which the given function returns True.

--> Syntax:
    variable_name = filter(function, input_list)

Ex. l = [1, 2, 3, 4, 5]

    def even(n):
        if(n % 2 == 0):
            return True
        return False

    onlyEven = filter(even, l)
    print(list(onlyEven))

    // Output: [2, 4]


==> Reduce Function:
--> for using it, we have to import reduce from functool module using "from functool import reduce"
--> It applies the rolling computation to sequential pair of elements.

--> Syntax:
    variable_name = reduce(function, input_list)

Ex. l = [1, 2, 3, 4, 5]

    from functool import reduce
    def sum(a, b):
        return a + b

    print(reduce(sum, l))


